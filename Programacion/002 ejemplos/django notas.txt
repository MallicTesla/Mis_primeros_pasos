http://127.0.0.1:8000/                          url 

(direcsion) django-admin startproject (nombre) .crea un prollecto jango nuevo
(direcsion) python manage.py migrate            se ejecutan los cambios echos

(direcsion) python manage.py startapp (nombre)  crea una app nueva 
(direcsion) python manage.py check nombre       revisa si la app esta vien instalada despues de agregarla en settings

(direcsion) dir                                 se ve lo que ahi dentro de la carpeta
(direcsion) python manage.py runserver          enpiesa a corer el servidor 
(direcsion) python manage.py makemigrations     es para ver si uvo modificaciones en los modelos de las apps

(direcsion) python manage.py createsuperuser    para crear un usuario admin
(direcsion) python manage.py collectstatic      es para crear una carpeta en el servidor de render

despues de crear una app ahi que agregarla al a lista de apps en settings.py en el archivo principal se agrega en INSTALLED_APPS 

despues de crear o modificar cada modelo (clases) se ejecuta el comando python manage.py makemigrations para ver los cambios u despues se migran para guardarlos
si se agrega un campo (columna) nuevo a un codigo existente ay que espesficar si es null o agregarle un valor por defecto

en la nueva app se tiene que crear un archivo llamado urls.py para guardar todas las rutas de esa app y que sea mas modular todo 
en el proyecto general en urls.py para incluir urls de las apps se llama al modulo include 
primero se coloca el nombre de la ruta y despues se coloca el nombre de la app punto el archivo donde estan las rutas (urls) y en el navegador se coloca primero la ruta establesida y despues la ruta del modulo

1)  en la consola con (django-admin startproject PrimerDjango .) se crea el prollecto con el nombre (PrimerDjango) al final va un (.) tambien al prinsipio 
    va la direcsion en la que queres que se cree

se ejecuta python manage.py runserver y funsiona


2)  se crea la app catalog con ((direcsion/ miproyecto) python manage.py startapp catalog) catalog es el nombre que se puede cambiar al final va el nombre


3)  en (direcsion) /miproyecto/settings
    en la funcion INSTALLED_APPS al final se coloca la linea "catalog.apps.CatalogConfig" para conectar la app catalog


4)  (direcsion) /miproyecto/
    se importa (from django.urls import path, include) y en la funcion urlpatterns se agrega path("catalog/", include("catalog.urls"))


5)  en (direcsion) se va a la app catalog
    y se crea un nuevo fichero llamado (urls.py) y se agrega 
    urlpatterns = []

    mas adelante se usa esto otro 

    from django.conf.urls import url
    # con (from .) se llama a todos los archivos de la carpeta en la que se encuentra esta
    from . import views 

6)  (direcsion) python manage.py createsuperuser
    crea un usuario supr admin 

    se ejecuta python manage.py runserver y funsiona

    si vas a la pagina y pones /admin te lleva al panel de administracion de django y entras con el usuario creado

7)  (direcsion) dir                                 se ve lo que ahi dentro de la carpeta
    (direcsion) python manage.py makemigrations     es para ver si uvo modificaciones
    (direcsion) python manage.py migrate            se ejecutan los cambios echos

8)  ahora se crean los "modelos que serian clases" dentro de la app en el archivo (models) 

9)  despues de crear el modelo se hacer el python manage.py makemigrations para preparar el fichero de imigracion
    y despues se ejecuta python manage.py migrate para aplicar todos los cambios echos 

10) se va dentro de la app (catalog) a el archivo admin.py para registrar los modelos 
    se importan todos los modelos (clases) que se crearon dentro del archibo models
    despues se registran todos los modelos en el panel de administrasion
    y despues se ejecuta el servidor python manage.py runserver para asegurarnos que todo quedo y entras a la direcsion http://127.0.0.1:8000/admin

11) para agregarle una interfas grafica se va a la app (catalog) al archibo urls.py y se crea una urls 

12) se va dentro de la app (catalog) a el archivo views.py y se crrea la funcion index 
    luego se ejecuta python manage.py runserver y deveria de funcionar aunque da un error que falta el archivo html

13) se crea una carpeta llamada templates dentro de la app (catalog) y dentro van los archivos html (base_generic) (index)
    y al archivo urls de myproyecto al final de la lista se agrega + static (settings.STATIC_URL, document_root = settings.STATIC_URL) mas sus import

--------------------------HTML---------------------------------
para realisar un comentario en un HTML y que no se ve en el nabegador se usa {# texto #} 

--------------------------------import y usos en views.py-------------------------
from django.http import HttpResponse        es para mostrar un simple texto en el navegador
from django.shortcuts import render         es para mostrar un html

--------------------------------en models dentro de la app---------------------------------
para creear un modelo con clave foranea se usa variavle = models.ForeignKey (clase prinsipal, on_delete = models.CASCADE)
con on_delete = models.CASCADE se boran todas las entradas relasionadas con la clase prinsipal para que no se rompa todo cuando se borra

------------------------------------para hacer pruevas con vases de datos ya echas-------------------------------------------
aca esta la documentacion de seed https://github.com/Brobin/django-seed
para hacer pruevas con vases de datos ya echas se instala django-seed (python -m pip install django-seed) 
se tiene que instalar esta libreria como si fuese una app en settings del proyecto en INSTALLED_APPS asi "django_seed" despues se corre un check para ver si quedo
si da error en el modulo psycopg2 ahi que instalarlo python -m pip install psycopg2-binary 
para utilisar la seed se utilisa el comando ruta del prollecto python manage.py seed post --number=50 y crea 50 entradas

---------------------------------------------------documentasion--------------------------------
relasionamientos https://docs.djangoproject.com/en/4.0/topics/db/examples/

-------------------------------------------BASES de datos-----------------------------------------------------
para trabajar con postgres primero tenes que crear la base en el programa (pgAdmin) 
1)  la base de datos se crea dentro de Databases
2)  la nombras - elegis el usuari y guardas 

------------------------------------------Subirlo a la nuve--------------------------------------------
para suvir el prollecto a la nuve de render https://render.com/docs/deploy-django

todo esto se ase en el archivo settings
 1)  realisas este import para crear una variavle de producsion
import os

 2)  despues tenes que modificar SECRET_KEY = True por
SECRET_KEY = os.environ.get('SECRET_KEY', default='your secret key')

 3)  se agrega esto que es para modificar ALLOWED_HOSTS (se agrega por devajo de ALLOWED_HOSTS)
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')

if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

render te pide que uses la base de datos PostgreSQL y te da unos paquetes para instalar y poder laeer las variavles de entorno
 4)  primero tenes que instalar en la consola de comandos
pip install dj-database-url

 5)  y depues instala esto otro
pip install psycopg2-binary

 6) realisas este import
import dj_database_url

 7)  despues vas a DATABASES y lo remplasas por esta variavle de entorno
    lel modulo dj_database_url.config() lee  el modulo dj_database_url y si no existe coloca la base de datos que esta entre los parantesis ()
DATABASES = {
    'default': dj_database_url.config(
        default='postgresql://postgres:postgres@localhost:5432/mysite',
        conn_max_age=600)
}

 8) despues instale este modulo en la consola de comandos que es whitenoise que sirve para que django ejecute los archivos estaticos en el servidor
pip install whitenoise[brotli]

 9) despues vas a MIDDLEWARE y agregas esto
'whitenoise.middleware.WhiteNoiseMiddleware',

10) despues se va a la parte de archivos estaticos y los tenes que configurar asi
    esto hase que si no estas en modo debug ejecuta hotra cofigurasion 

# This setting tells Django at which URL static files are going to be served to the user.
# Here, they well be accessible at your-domain.onrender.com/static/...
STATIC_URL = '/static/'

# Following settings only make sense on production and may break development environments.
if not DEBUG:
    # Tell Django to copy statics to the `staticfiles` directory
    # in your application directory on Render.
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

    # Turn on WhiteNoise storage backend that takes care of compressing static files
    # and creating unique names for each version so they can safely be cached forever.
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

11) despues generas un nuevo archivo en la carpeta prinsipal llamado build.sh para ejecutar un comando de django 
    tenes que colococar esto dentro

#!/usr/bin/env bash
# exit on error
set -o errexit

# poetry install

python manage.py collectstatic --no-input
python manage.py migrate

12) tenes que instalar este modulo (pip install gunicorn) con Git Bash dentro de la carpeta prinsipal del proyecto
    para entrar a una carpeta en Git Bash primero pone (ls) te muestra la carpetas y entras a esa carpeta poniendo (cd nombre de la carpeta)
pip install gunicorn

13) despues podes volver a la consola de comandos normal e instalar esto en la carpeta general del proyecto esto muestra todos los modulos que nesesita para funsionar
pip freeze > requirements.txt

14) luego se va al archivo build.sh y se agrega esto (pip install -r requirements.txt) en la linia 6
    es para que instale todos los paquetes que nenesita

15) todo esto lo guardas en un repositorio nuevo





